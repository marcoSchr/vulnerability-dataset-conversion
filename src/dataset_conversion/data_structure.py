class DataStructure:
    index: str = None
    access_gained: str = None
    attack_origin: str = None
    authentication_required: str = None
    availability: str = None
    cve_id: str = None
    cve_page: str = None
    cwe_id: str = None
    complexity: str = None
    confidentiality: str = None
    integrity: str = None
    known_exploits: str = None
    publish_date: str = None
    score: str = None
    summary: str = None
    update_date: str = None
    vulnerability_classification: str = None
    add_lines: str = None
    codeLink: str = None
    commit_id: str = None
    commit_message: str = None
    del_lines: str = None
    file_name: str = None
    files_changed: str = None
    func_after: str = None
    func_before: str = None
    lang: str = None
    lines_after: str = None
    lines_before: str = None
    parentID: str = None
    patch: str = None
    project: str = None
    project_after: str = None
    project_before: str = None
    target: str = None
    vul_func_with_fix: str = None
    processed_func: str = None
    flaw_line: str = None
    flaw_line_index: str = None

    # TODO: add all possible inputs as named input, initialized to None
    # This will allow adding more input in the future, as other implementations will then just use None,
    # as they do not have the corresponding fields
    # Readers and writers can then use the data they need and ignore the rest
    # But they need to be able to handle fields that are None
    # VulChecker for example has only raw source code and exact line numbers as positive data source
    # --> How to convert a single file with line numbers to commit diffs?
    def __init__(self):
        pass
