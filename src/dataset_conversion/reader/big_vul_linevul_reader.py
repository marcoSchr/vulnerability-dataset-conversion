import json
import math

import pandas

from .reader import Reader
from src.dataset_conversion.data.data_structure import DataStructure
from ..data.file_change import FileChange


class BigVulLineVulReader(Reader):
    def read_file(self):
        for chunk in pandas.read_csv(self.file_path, chunksize=128, keep_default_na=False, na_values=['']):
            for field in chunk.iterrows():
                yield self.convert_to_data_structure(field)

    def convert_files_changed(self, files_changed: str) -> list[FileChange]:
        if not isinstance(files_changed, str):
            return []
        files = files_changed.split('<_**next**_>')
        files_list = []
        for file in files:
            file_dict = json.loads(file)
            file_change = FileChange(sha1=file_dict.get('sha', None), file_name=file_dict.get('filename', None),
                                     status=file_dict.get('status', None),
                                     additions=file_dict.get('additions', None),
                                     deletions=file_dict.get('deletions', None),
                                     blob_url=file_dict.get('blob_url', None),
                                     raw_url=file_dict.get('raw_url', None),
                                     contents_url=file_dict.get('contents_url', None),
                                     previous_filename=file_dict.get('previous_filename', None),
                                     patch=file_dict.get('patch', None))
            files_list.append(file_change)
        return files_list

    def convert_to_data_structure(self, field) -> DataStructure:
        d = DataStructure()
        d.index = field[1]['index']
        d.access_gained = field[1]["Access Gained"]
        d.attack_origin = field[1]['Attack Origin']
        d.authentication_required = field[1]['Authentication Required']
        d.availability = field[1]['Availability']
        d.cve_id = field[1]['CVE ID']
        d.cve_page = field[1]['CVE Page']
        d.cwe_id = field[1]['CWE ID']
        d.complexity = field[1]['Complexity']
        d.confidentiality = field[1]['Confidentiality']
        d.integrity = field[1]['Integrity']
        d.known_exploits = field[1]['Known Exploits']
        d.publish_date = field[1]['Publish Date']
        d.score = field[1]['Score']
        d.summary = field[1]['Summary']
        d.update_date = field[1]['Update Date']
        d.vulnerability_classification = field[1]['Vulnerability Classification']
        d.add_lines = field[1]['add_lines']
        d.codeLink = field[1]['codeLink']
        d.commit_id = field[1]['commit_id']
        d.commit_message = field[1]['commit_message']
        d.del_lines = field[1]['del_lines']
        d.file_name = field[1]['file_name']
        d.files_changed = self.convert_files_changed(field[1]['files_changed'])
        d.func_after = field[1]['func_after']
        d.func_before = field[1]['func_before']
        d.lang = field[1]['lang']
        d.lines_after = field[1]['lines_after']
        d.lines_before = field[1]['lines_before']
        d.parentID = field[1]['parentID']
        d.patch = field[1]['patch']
        d.project = field[1]['project']
        d.project_after = field[1]['project_after']
        d.project_before = field[1]['project_before']
        d.target = field[1]['target']
        d.vul_func_with_fix = field[1]['vul_func_with_fix']
        d.processed_func = field[1]['processed_func']
        d.flaw_line = field[1]['flaw_line'].split('/~/') if isinstance(field[1]['flaw_line'], str) else None
        if isinstance(field[1]['flaw_line_index'], str):
            d.flaw_line_index = map(int, field[1]['flaw_line_index'].split(','))
        elif isinstance(field[1]['flaw_line_index'], float) and not math.isnan(field[1]['flaw_line_index']):
            d.flaw_line_index = [int(field[1]['flaw_line_index'])]
        else:
            d.flaw_line_index = None
        return d
