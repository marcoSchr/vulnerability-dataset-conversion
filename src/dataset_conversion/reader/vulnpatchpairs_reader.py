import json
from typing import Iterator

import pandas

from .reader import Reader
from src.dataset_conversion.data.data_structure import DataStructure
from ..data.file_change import FileChange


class VulnPatchPairsReader(Reader):
    def read_file(self) -> Iterator[DataStructure]:
        for entry in pandas.read_json(self.file_path).iterrows():
            for datastruct in  self.convert_to_data_structure(entry):
                yield datastruct

    def convert_to_data_structure(self, field) -> DataStructure:
        vulnerable_sample = DataStructure()
        vulnerable_sample.index = field[0]
        vulnerable_sample.commit_id = field[1]['patched_commit_id']
        vulnerable_sample.commit_message = field[1]['patch_commit_message']
        vulnerable_sample.func_after = field[1]['patched_func']
        vulnerable_sample.func_before = field[1]['vulnerable_func']
        vulnerable_sample.project = field[1]['project']
        vulnerable_sample.vul_func_with_fix = field[1]['patched_func']
        vulnerable_sample.target = 1
        vulnerable_sample.file_name = field[1]['patched_filepath']
        vulnerable_sample.patch = field[1]['patch_diff_delta']
        vulnerable_sample.project_after = field[1]['patch_commit_message']
        vulnerable_sample.project_before = field[1]['vulnerable_commit_id']

        fixed_sample = DataStructure()
        fixed_sample.index = field[0]
        fixed_sample.commit_id = field[1]['patched_commit_id']
        fixed_sample.commit_message = field[1]['patch_commit_message']
        fixed_sample.func_after = field[1]['patched_func']
        fixed_sample.func_before = field[1]['patched_func']
        fixed_sample.project = field[1]['project']
        fixed_sample.vul_func_with_fix = field[1]['patched_func']
        fixed_sample.target = 0
        fixed_sample.file_name = field[1]['patched_filepath']
        fixed_sample.patch = field[1]['patch_diff_delta']
        fixed_sample.project_after = field[1]['patch_commit_message']
        fixed_sample.project_before = field[1]['patched_commit_id']

        return [vulnerable_sample, fixed_sample]
