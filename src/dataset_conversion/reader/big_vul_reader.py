import json
import math

import pandas

from .reader import Reader
from src.dataset_conversion.data.data_structure import DataStructure
from ..data.file_change import FileChange


class BigVulReader(Reader):
    def read_file(self):
        for chunk in pandas.read_csv(self.file_path, chunksize=128, keep_default_na=False, na_values=[''], index_col=0):
            for field in chunk.iterrows():
                yield self.convert_to_data_structure(field)

    def convert_files_changed(self, files_changed: str) -> list[FileChange]:
        if not isinstance(files_changed, str):
            return []
        files = files_changed.split('<_**next**_>')
        files_list = []
        for file in files:
            file_dict = json.loads(file)
            file_change = FileChange(sha1=file_dict.get('sha', None), file_name=file_dict.get('filename', None),
                                     status=file_dict.get('status', None),
                                     additions=file_dict.get('additions', None),
                                     deletions=file_dict.get('deletions', None),
                                     blob_url=file_dict.get('blob_url', None),
                                     raw_url=file_dict.get('raw_url', None),
                                     contents_url=file_dict.get('contents_url', None),
                                     previous_filename=file_dict.get('previous_filename', None),
                                     patch=file_dict.get('patch', None))
            files_list.append(file_change)
        return files_list

    def convert_to_data_structure(self, field) -> DataStructure:
        d = DataStructure()
        d.index = field[1].name
        d.authentication_required = field[1]['authentication_required']
        d.availability = field[1]['availability_impact']
        d.cve_id = field[1]['cve_id']
        d.cve_page = field[1]['cve_page']
        d.cwe_id = field[1]['cwe_id']
        d.complexity = field[1]['access_complexity']
        d.confidentiality = field[1]['confidentiality_impact']
        d.integrity = field[1]['integrity_impact']
        d.publish_date = field[1]['publish_date']
        d.score = field[1]['score']
        d.summary = field[1]['summary']
        d.update_date = field[1]['update_date']
        d.vulnerability_classification = field[1]['vulnerability_classification']
        d.codeLink = field[1]['ref_link']
        d.commit_id = field[1]['commit_id']
        d.commit_message = field[1]['commit_message']
        d.files_changed = self.convert_files_changed(field[1]['files_changed'])
        d.lang = field[1]['lang']
        d.project = field[1]['project']
        d.project_after = field[1]['version_after_fix']
        d.project_before = field[1]['version_before_fix']
        return d
