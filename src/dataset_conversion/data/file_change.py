from dataclasses import dataclass


@dataclass
class FileChange:
    """Class for file changes in a commit"""
    sha1: str
    file_name: str
    # [added, deleted, modified]
    status: str
    additions: int
    deletions: int
    blob_url: str
    raw_url: str
    contents_url: str
    previous_filename: str
    patch: str

    def changes(self):
        if isinstance(self.additions, int) and isinstance(self.deletions, int):
            return self.additions + self.deletions
        else:
            None

    def dict(self) -> dict:
        file_change_dict = {}
        if self.sha1:
            file_change_dict['sha'] = self.sha1
        if self.file_name:
            file_change_dict['filename'] = self.file_name
        if self.status:
            file_change_dict['status'] = self.status
        if self.additions is not None:
            file_change_dict['additions'] = self.additions
        if self.deletions is not None:
            file_change_dict['deletions'] = self.deletions
        if self.changes() is not None:
            file_change_dict['changes'] = self.changes()
        if self.blob_url:
            file_change_dict['blob_url'] = self.blob_url
        if self.raw_url:
            file_change_dict['raw_url'] = self.raw_url
        if self.contents_url:
            file_change_dict['contents_url'] = self.contents_url
        if self.patch:
            file_change_dict['patch'] = self.patch
        if self.previous_filename:
            file_change_dict['previous_filename'] = self.previous_filename
        return file_change_dict
